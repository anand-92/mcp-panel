name: Build Swift App

on:
  push:
    branches: [ main, swifty ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, swifty ]

jobs:
  build-swift-app:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Swift app
      working-directory: MCPServerManager
      run: |
        # Build for native architecture
        swift build -c release

        # Verify binary was created
        ls -la .build/release/
        file .build/release/MCPServerManager

    - name: Create app bundle
      working-directory: MCPServerManager
      run: |
        # Create .app structure
        mkdir -p build/MCP-Server-Manager.app/Contents/MacOS
        mkdir -p build/MCP-Server-Manager.app/Contents/Resources

        # Copy binary
        cp .build/release/MCPServerManager build/MCP-Server-Manager.app/Contents/MacOS/

        # Copy app icon
        cp icons/AppIcon.icns build/MCP-Server-Manager.app/Contents/Resources/AppIcon.icns

        # Create Info.plist
        cat > build/MCP-Server-Manager.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MCPServerManager</string>
            <key>CFBundleIdentifier</key>
            <string>com.mcpmanager.app</string>
            <key>CFBundleName</key>
            <string>MCP Server Manager</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>2.0.${{ github.run_number }}</string>
            <key>CFBundleVersion</key>
            <string>${{ github.run_number }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
        </dict>
        </plist>
        EOF

    - name: Import certificates
      env:
        MAC_APP_STORE_CERT: ${{ secrets.MAC_APP_STORE_CERT }}
        MAC_INSTALLER_CERT: ${{ secrets.MAC_INSTALLER_CERT }}
      run: |
        # Create temporary keychain
        security create-keychain -p actions build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p actions build.keychain
        security set-keychain-settings -t 3600 -u build.keychain

        # Decode and import App Store signing certificate (no password)
        echo "$MAC_APP_STORE_CERT" | base64 --decode > appstore_cert.p12
        security import appstore_cert.p12 -k build.keychain -P "" -T /usr/bin/codesign -T /usr/bin/productsign -A

        # Decode and import Installer certificate (no password)
        echo "$MAC_INSTALLER_CERT" | base64 --decode > installer_cert.p12
        security import installer_cert.p12 -k build.keychain -P "" -T /usr/bin/codesign -T /usr/bin/productsign -A

        # Set partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign:,productsign: -s -k actions build.keychain

        # Verify certificates
        echo "Imported certificates:"
        security find-identity -v -p codesigning

        # Clean up
        rm appstore_cert.p12 installer_cert.p12

    - name: Install create-dmg tool
      run: brew install create-dmg

    - name: Create DMG
      working-directory: MCPServerManager
      run: |
        # Create installer DMG with Applications symlink
        VERSION="2.0.${{ github.run_number }}"
        bash ../create-dmg.sh build/MCP-Server-Manager.app "build/MCP-Server-Manager-v${VERSION}.dmg"

        # Also create a "latest" symlink for consistent naming
        cd build
        ln -sf "MCP-Server-Manager-v${VERSION}.dmg" MCP-Server-Manager.dmg

    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la MCPServerManager/build/ || echo "No build directory"
        find . -name "*.dmg" -type f || echo "No DMG files found"
        find . -name "*.app" -type d || echo "No APP bundles found"

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: mcp-server-manager-v2.0.${{ github.run_number }}
        path: MCPServerManager/build/MCP-Server-Manager-v*.dmg
        retention-days: 30

    - name: Delete old latest release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/swifty'
      run: |
        gh release delete latest -y || true
        git push origin :refs/tags/latest || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/swifty'
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'latest' }}
        name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Latest Build v2.0.{0}', github.run_number) }}
        body: |
          Version: 2.0.${{ github.run_number }}
          Commit: ${{ github.sha }}
        generate_release_notes: ${{ startsWith(github.ref, 'refs/tags/') }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        files: |
          MCPServerManager/build/MCP-Server-Manager-v*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
