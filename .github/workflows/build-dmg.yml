name: Build DMG

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-dmg:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --include=dev
        npm install @electron/notarize --save-dev

    - name: Build macOS app and DMG
      env:
        # Code signing configuration
        CSC_LINK: ${{ secrets.MAC_CERTS }}
        # No password needed for certificate
        CSC_IDENTITY_AUTO_DISCOVERY: true
        # Apple notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # Allow signing even if some dependencies are unresolved
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        # GitHub token for auto-publishing
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Enable notarization
        NOTARIZE: true
      run: |
        # Rename DMG to have consistent name
        npm run build-mac
        mv dist/*.dmg dist/MCP-Server-Manager.dmg || true
        mv dist/*.zip dist/MCP-Server-Manager.zip || true

    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la dist/ || echo "No dist directory"
        find . -name "*.dmg" -type f || echo "No DMG files found"
        find . -name "*.app" -type f || echo "No APP files found"

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: mcp-server-manager-${{ github.sha }}
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 30

    - name: Upload APP artifact (for debugging)
      uses: actions/upload-artifact@v4
      if: failure() || success()
      with:
        name: mcp-server-manager-app-${{ github.sha }}
        path: |
          dist/mac/*.app
        retention-days: 7

    - name: Delete old latest release
      if: github.ref == 'refs/heads/main'
      run: |
        gh release delete latest -y || true
        git push origin :refs/tags/latest || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Latest Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest
        name: Latest Build
        body: |
          **Latest automated build from main branch**

          üì¶ **Download:** [MCP-Server-Manager.dmg](https://github.com/${{ github.repository }}/releases/download/latest/MCP-Server-Manager.dmg)

          üîÑ **Commit:** ${{ github.sha }}
          üìÖ **Built:** ${{ github.event.head_commit.timestamp }}

          ‚ö†Ô∏è **Note:** This is an automated build. For stable releases, check [Releases](https://github.com/${{ github.repository }}/releases).
        files: |
          dist/*.dmg
          dist/*.zip
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Tagged Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.dmg
          dist/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}