name: Build DMG

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-dmg:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --include=dev

    - name: Build macOS app and DMG
      env:
        # Code signing configuration
        CSC_LINK: ${{ secrets.MAC_CERTS }}
        # No password needed for certificate
        CSC_IDENTITY_AUTO_DISCOVERY: true
        # Apple notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # Allow signing even if some dependencies are unresolved
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        # GitHub token for auto-publishing
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Enable notarization
        NOTARIZE: true
      run: |
        # Rename DMG to have consistent name
        npx electron-builder --mac

    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la dist/ || echo "No dist directory"
        find . -name "*.dmg" -type f || echo "No DMG files found"
        find . -name "*.app" -type f || echo "No APP files found"

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: mcp-server-manager-${{ github.sha }}
        path: dist/MCP-Server-Manager.*
        retention-days: 30

    # This step ensures that when we push to main, the 'latest' tag and release are cleanly replaced.
    # It prevents errors from trying to create a release that already exists.
    - name: Delete old latest release
      if: github.ref == 'refs/heads/main'
      run: |
        gh release delete latest -y || true
        git push origin :refs/tags/latest || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      with:
        # Use the git tag for tagged releases, or 'latest' for pushes to main
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'latest' }}
        # Generate release notes for tagged releases, or use a static title for 'latest'
        name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || 'Latest Build' }}
        # Automatically generate release notes from commits for tagged releases
        generate_release_notes: ${{ startsWith(github.ref, 'refs/tags/') }}
        # Mark 'latest' builds as pre-release, and tagged builds as stable
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        files: |
          dist/MCP-Server-Manager.dmg
          dist/MCP-Server-Manager.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}